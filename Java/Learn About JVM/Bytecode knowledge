# Bytecode knowledge

## Ⅰ. 查看字节码文件

- [Jclasslib - 查看字节码的插件，在IDEA中可直接安装][]

![1576155897876](../../media/1576155897876.png)



![1576068450922](../../media/1576068450922.png)

![1576068704487](../../media/1576068704487.png)

![1576068927171](../../media/1576068927171.png)



1. 使用**javap -verbose**命令分析一个字节码文件时，将会得到该字节码文件的`魔数`、`版本号`、`常量池`、`类信息`、`类的构造方法`、`类中的方法信息`、`类变量`与`成员变量`等信息。

![1575464432398](../../media/1575464432398.png)

![1575464474864](../../media/1575464474864.png)

> ### 1.`魔数`： 所有的.class字节码文件的前四个字节都是魔数，魔数值为固定值：0xCAFEBABE。如果不是，JVM会 拒绝加载。

> ### 2. `版本信息`：魔数之后的四个字节是版本信息，前连个字节是 minor version（**次版本号**），后两个字节是major versio（**主版本号**）。这里的版本号为00 00 00 34,换算成十进制表示，次版本号为0，主版本号为52.所以该文件的版本号为：1.8.0（1.8来自主版本号52对应的jdk8，jdk7为51，以此类推,0来自次版本号0）可以通过java -version 来验证这一点。

![1575980236202](../../media/1575980236202.png)



> ### 3. `常量池（constant pool）`：紧接着版本信息之后的就是常量池入口。一个java类中定义的很多信息都是由常来维护和描述的，我们可以将常量池看作是Class文件的**资源仓库**，比如说java类中定义的方法和变量信息。常量池中主要存储两类常量：字面量和符号引用（[不一定都是常量，也可以是变量]()）
>
> > 					- 字面量： 如字符串，java中声明为final的常量值等
> > 					- 符号引用：如类和接口的全限定名，字段的名称和描述符，方法的名称和描述符等。
>
> `常量池的总体结构`：java类所对应的常量池主要由**常量池数量**和**常量池数组**两部分组成。
>
> > - `常量池数量`紧跟在主版本后面，占据**2个字节**
> > - `常量池数组`（常量表）紧跟在常量池数量之后，常量池数组与一般数组不同的是，[常量池数组中不同元素的类型、结构都是不同的，字节长度也因此不同]()；但是，每一种元素的第一个数据都是一个u1类型，该字节是个标志位，占据**1个字节**，JVM在解析常量池时，会根据这个u1类型来获取元素的具体类型。值得注意的是，常量池中元素的***个数= 常量池数 - 1*** （其中0暂时不使用）。[目的是满足某些常量池索引值的数据在特定情况下需要表达【不引用任何一个常量池】的含义；根本原因在于，索引值0也是一个常量（JVM保留常量），只不过它不位于常量表中，这个常量值就对应null值；所以常量池的索引从1而非0开始。]()

###### 对于基本数据类型，JVM都只使用一个大写字母来表示：

- **B** - byte
- **C** - char
- **D** - double
- **F** - float
- **I** - int
- **J** - long
- **S** - short
- **Z** - boolean
- **V** - void
- **L** - 对象类型，如Ljava/lang/String

###### 对于数组类型来说，每一个维度使用一个前置的[来表示，如:

- **int[]** - [I
- **String\[ ][ ]** - [[Ljava/lang/String

###### 用描述符描述方法时，按照先参数列表，后返回值的顺序来描述，参数列表按照参数的严格顺序放在一组()内：

- **String getName(int id, String name)** - (I, Ljava/lang/String;) Ljava/lang/String

> ### 4. `Access_Flag` 访问标志
>
> 





- 42
# 3：Bytecode knowledge

## Ⅰ. 查看字节码文件

- [Jclasslib - 查看字节码的插件，在IDEA中可直接安装][]

![1576155897876](../../media/1576155897876.png)



![1576068450922](../../media/1576068450922.png)

![1576068704487](../../media/1576068704487.png)

![1576068927171](../../media/1576068927171.png)



1. 使用**javap -verbose**命令分析一个字节码文件时，将会得到该字节码文件的`魔数`、`版本号`、`常量池`、`类信息`、`类的构造方法`、`类中的方法信息`、`类变量`与`成员变量`等信息。

   (当成员变量或方法为private时，需要额外加上-p(**javap -verbose -p**)参数才会显示，否则会隐藏)

![1575464432398](../../media/1575464432398.png)

![1575464474864](../../media/1575464474864.png)

> ### 1.`魔数`： 所有的.class字节码文件的前四个字节都是魔数，魔数值为固定值：0xCAFEBABE。如果不是，JVM会 拒绝加载。

> ### 2. `版本信息`：魔数之后的四个字节是版本信息，前连个字节是 minor version（**次版本号**），后两个字节是major versio（**主版本号**）。这里的版本号为00 00 00 34,换算成十进制表示，次版本号为0，主版本号为52.所以该文件的版本号为：1.8.0（1.8来自主版本号52对应的jdk8，jdk7为51，以此类推,0来自次版本号0）可以通过java -version 来验证这一点。

![1575980236202](../../media/1575980236202.png)



> ### 3. `常量池（constant pool）`：紧接着版本信息之后的就是常量池入口。一个java类中定义的很多信息都是由常来维护和描述的，我们可以将常量池看作是Class文件的**资源仓库**，比如说java类中定义的方法和变量信息。常量池中主要存储两类常量：字面量和符号引用（[不一定都是常量，也可以是变量]()）
>
> > 					- 字面量： 如字符串，java中声明为final的常量值等
> > 					- 符号引用：如类和接口的全限定名，字段的名称和描述符，方法的名称和描述符等。
>
> `常量池的总体结构`：java类所对应的常量池主要由**常量池数量**和**常量池数组**两部分组成。
>
> > - `常量池数量`紧跟在主版本后面，占据**2个字节**
> > - `常量池数组`（常量表）紧跟在常量池数量之后，常量池数组与一般数组不同的是，[常量池数组中不同元素的类型、结构都是不同的，字节长度也因此不同]()；但是，每一种元素的第一个数据都是一个u1类型，该字节是个标志位，占据**1个字节**，JVM在解析常量池时，会根据这个u1类型来获取元素的具体类型。值得注意的是，常量池中元素的***个数= 常量池数 - 1*** （其中0暂时不使用）。[目的是满足某些常量池索引值的数据在特定情况下需要表达【不引用任何一个常量池】的含义；根本原因在于，索引值0也是一个常量（JVM保留常量），只不过它不位于常量表中，这个常量值就对应null值；所以常量池的索引从1而非0开始。]()

###### 对于基本数据类型，JVM都只使用一个大写字母来表示：

- **B** - byte
- **C** - char
- **D** - double
- **F** - float
- **I** - int
- **J** - long
- **S** - short
- **Z** - boolean
- **V** - void
- **L** - 对象类型，如Ljava/lang/String

###### 对于数组类型来说，每一个维度使用一个前置的[来表示，如:

- **int[]** - [I
- **String\[ ][ ]** - [[Ljava/lang/String

###### 用描述符描述方法时，按照先参数列表，后返回值的顺序来描述，参数列表按照参数的严格顺序放在一组()内：

- **String getName(int id, String name)** - (I, Ljava/lang/String;) Ljava/lang/String

> ### 4. `Access_Flag` 访问标志
<<<<<<< Updated upstream
>

> ### 5. Fields_count 字段表

> ### 6. Methods_count 方法表
>
> ![1587997319151](E:\Typora\Typora_Note\media\1587997319151.png)
>
> 
>
> --43
=======



> ### 5. 方法表（Methods）

### 6. synchronized 关键字

`a. no synchronized`

```java
public class test4 {
    private int a = 1;

    public int getA() {
        return a;
    }

    private void setA(int a) {
        this.a = a;
    }
}
```

```linux
javap -verbose -p test4.class
```

![1577709843283](../../media/1577709843283.png)

`b. synchronized for method` 

​	加锁（moniterenter）和释放锁(moniterexit)的命令未显示出来, **对this对象上锁**

![1577709876729](../../media/1577709876729.png)

`c. synchronized for object`

```java
public class test4 {
    private int a = 1;

    private Object object;
    public int getA() {
        return a;
    }

    private synchronized void setA(int a) {
        this.a = a;
    }

    private void test(String s){
        synchronized (object){
            System.out.println("hello");
        }
    }
}
```

![1577710875597](../../media/1577710875597.png)

`c. synchronized for static method`

**给当前对象所对应的类对象上锁**

```java
public class test4 {
    private int a = 1;

    private Object object;
    public int getA() {
        return a;
    }

    private synchronized void setA(int a) {
        this.a = a;
    }

    private void test(String s){
        synchronized (object){
            System.out.println("hello");
        }
    }

    private static synchronized void test2(){
        System.out.println("hhh");
    }
}
```

![1577711225757](../../media/1577711225757.png)



### 7. 静态变量和静态代码快

静态变量和静态代码快最终都会**按顺序**被放置到<clinit>方法中

![1578314802005](../../media/1578314802005.png)



### 8. this关键字及异常表的作用

> code:

![1589376611242](../../media/1589376611242.png)



**This 关键字: ** 对于Java类中的每一个实例方法(非static，static方法或者参数是从属于当前类所对应的`class对象`					  **而非**`当前对象`)，其在编译后所生成的字节码当中，方法参数的数量总是会比源代码方法参数的数量					  多一个，**它位于方法的第一个参数位置**；这样，我们就可以通过this来访问当前对象的属性以及其					 他方法。

​						**这个操作是在编译期完成的**，即由javac编译期在编译期对this的访问转化为一个普通实例方法参						数的访问；接下来在运行期，由JVM在调用实例方法时，自动向实例方法传入该参数。所以在实例方						法的局部变量表中，至少会有一个指向当前对象的局部变量。

![1589376033069](../../media/1589376033069.png)



![1589376244335](../../media/1589376244335.png)



### 9. Exception_table 异常处理机制

![1589377627933](../../media/1589377627933.png)



![1589377734453](../../media/1589377734453.png)



![1589377571748](../../media/1589377571748.png)

> **1.  catach_type #0的异常是`编译器`自动生成出来，目的是处理代码中所定义的异常处理不了的异常。**
>
> **2. 当异常处理存在finally语句块时，现代化的JVM采取的处理方式是将finally语句块的字节码拼接到每一个catch块后面。即程序中存在多少个catch字节码块，就会跟着有多少个finally字节码块。**
>
> > -  *编译器编译出来的字节码用的是goto跳转，而JVM采用重复的方式来减少跳转*
> > - *catch_type0也会为其拼接finally代码块，因此上面这个例子会重复4个finally代码块。也就是说如果有异常没有被catch到，会被catch_type0捕获，也会走finally,验证如下：*

``` groovy
class TestException {
    void test1(){
        try {
            FileInputStream stream = new FileInputStream("notExist.txt")
        }catch(NullPointerException e){
            println("NullPointerException")
        }finally{
            println("app stop")
        }
    }

    public static void main(String[] args) {
        TestException test = new TestException()
        test.test1()
    }
}
```

![1589465280012](../../media/1589465280012.png)

当把异常抛出时，字节码文件会增加多`Exceptionsxs`信息

![1589465764097](../../media/1589465764097.png)



### 10. Stack Frame(栈帧)

> > `栈帧`是一种用于帮助虚拟机执行方法调用与方法执行的数据结构，**它只由某个特定的线程所独享**，因此不存在共享变量的多线程问题。
>
> > 栈帧本身是一种`数据结构`，封装了方法的**局部变量表**(slot，他是局部变量存储的最小单位，对于某些较大的数据类型，有些会占据两个slot。slot存在复用情况，因此数量小于等于局部变量数量，具体与JVM实现需密切相关)、**动态链接信息**(将`符号引用`(符号引用存储在常量池中)转换为`直接引用`)、**方法的返回地址**以及**操作数栈**等信息。
> >
> > > - 符号引用 --->直接引用
> > >
> > > 有些符号引用是在类加载阶段或第一次使用时转换为直接引用，这种转换叫做`静态解析`（编译期）；另外一些符号引用则是在每次运行期转换为直接引用，这种转换叫做`动态链接`。这体现为Java的***多态性***。
>
> ![1589896025073](../../media/1589896025073.png)
>



### 11. JVM方法调用与方法执行

- ***静态解析：***`符号引用`是在类加载阶段转换为`直接引用`。存在以下四种情况:

  > 1. 静态方法
  > 2. 父类方法
  > 3. 构造方法
  > 4. 私有方法（public 方法之所以不是静态解析，是因为它可以被重写overied，就存在多态的可能）

- ***动态解析：***



------

从字节码层面总共有五种方法调用相关的指令：

##### 1. invokeinterface   <----动态解析

> 调用接口中的方法，实际上是在运行期决定的，决定到底调用实现该接口的哪个对象的特定方法。

> 动态代理实例
>
> - interface
>
> ```java
> public interface Speak {
>     void hello();
> }
> ```
>
> - implement class
>
> ```java
> public class Human implements Speak {
>     @Override
>     public void hello() {
>         System.out.println("我要吃饭");
>     }
> 
>     @Override
>     public String toString() {
>         System.out.println("hhhh");
>         return "hhhh";
>     }
> }
> ```
>
> - invocation handler class
>
> ```java
> class MyDynamicHandler implements InvocationHandler {
>     private Speak speak;
> 
>     MyDynamicHandler(Speak speak) {
>         this.speak = speak;
>     }
> 
>     @Override
>     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
>         System.out.println("你好！" + method);
> 
>         method.invoke(speak,args);
>         System.out.println("谢谢！" + method);
> 
>         return null;
>     }
> }
> ```
>
> - main test class --   [$Proxy0.class](..\..\files\$Proxy0.class) 
>
> ```java
> public class Client {
>     public static void main(String[] args) {
>         System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles","true");  //setup for save generated class to local.
>         
>         Human human = new Human();
>         InvocationHandler handler = new MyDynamicHandler(human);
> 
>         Class<?> clz = human.getClass();
> 
>         Speak speak = (Speak) Proxy.newProxyInstance(clz.getClassLoader(),clz.getInterfaces(),handler);
> 
>         System.out.println("class: "+speak.getClass());
>         System.out.println("superClass: " + speak.getClass().getSuperclass());
> 
>         speak.hello();
>         speak.toString();
>     }
> }
> ```
>
> ![1593439956678](../media/1593439956678.png)
>
> 

##### 2. invokestatic    <----静态解析

> 调用静态方法

```java
class TestInvoke {
    public static void testStatic(){

        System.out.println("AAA");
    }

    public static void main(String[] args) {
        testStatic();
    }
}
```



![1590068974826](../../media/1590068974826.png)



- **方法的静态分派**

> ```java
> GrandFather g1 = new Father();
> ```
>
> 以上代码，g1的`静态模型`是GrandFather，而g1的`实际类型`（真正指向的类型）是Father。
>
> 我们可以得出这样一个结论：
>
> ​		**变量的`静态类型`是不会发生变化的，而变量的`实际类型`则可以发生变化（多态的一种体现），实际类型要在运行期才能确定。**
>
> ​		***方法重载，是一种静态行为，编译期就可完全确定。***

```java
class TestInvoke {
    
    //方法重载，参数类型取决于变量声明的类型，而非实际类型
    public void test(GrandFather grandFather){
        System.out.println("grand father");
    }

    public void test(Father father){
        System.out.println("father");
    }

    public void test(Son son){
        System.out.println("son");
    }

    public static void main(String[] args) {
        TestInvoke invoke = new TestInvoke();

        GrandFather g1 = new Father();
        GrandFather g2 = new Son();

        invoke.test(g1);
        invoke.test(g2);
    }

}


class GrandFather{

}

class  Father extends GrandFather{

}

class Son extends Father{

}
```

![1591016272581](../media/1591016272581.png)



- **方法的动态分派**

> 方法的动态分派涉及到一个重要的概念: `方法接收者`（**即调用方法的这个对象是谁**），[在上面`方法重载`的例子里，始终调用方法的对象都是TestInvoke，而下面的`方法重写`的例子，则分别是GrandPa，Father，Son。]()
>
> invokevirtual 字节码指令的多态查找流程
>
> 比较方法重载与方法重写，可以得到这样一个结论: **`方法重载`是静态的，是编译期行为;`方法重写`是动态的，是运行期行为。**
>

> 针对方法调用动态分派的过程，虚拟机会在类的方法区建立一个`虚拟方法表`的数据结构**(vitural method table, vtable)**, 用于方法执行过程中快速找到方法的执行入口。同时，存在重写的方法在父子类中方法执行入口的索引值是相同的，从而提高了执行效率。
>
> 与之类似，针对于invokeinterface指令来说，虚拟机会建立一个叫做`接口方法表`的数据结构**(interface method table, itable)**

```java
class TestInvoke {

    public static void main(String[] args) {
        GrandPa g1 = new GrandPa();
        GrandPa g2 = new Father();

        g1.test();
        g2.test();

        g1 = new Son();
        g1.test();

    }

}


class GrandPa {
    public void test(){
        System.out.println("GrandPa");
    }
}

class Father extends GrandPa {
    public void test(){
        System.out.println("Father");
    }
}

class Son extends Father {
    public void test(){
        System.out.println("Son");
    }
}
```

![1591017353196](../media/1591017353196.png)

![1591018898576](../media/1591018898576.png)

##### 字节码的解释执行

现代JVM在执行Java代码时候，通常会将`编译执行`与`解释执行`结合起来   （56集实例字节码演示）

> 基于栈的指令集与基于寄存器的指令集之间的关系：
>
> 1. JVM执行字节码时指令时所采取是基于栈的指令集；
> 2. 基于栈的指令集主要包括入栈和出栈两种；
> 3. 基于栈的指令集优势在于它可以在不同平台之间移植；而基于寄存器的指令集是与硬件架构紧密关联的，无法做到可移植。
> 4. 基于栈的指令集劣势在于，完成相同的操作所需要的指令数量远高于使用寄存器指令集的数量。基于栈的指令集是在JVM内存中完成操作的；而基于寄存器的指令集直接由CPU来执行，是在高速缓冲区完成的，速度要快很多。虽然虚拟机可以采用一些优化手段(如将常用的热点指令映射到寄存器指令)，但总体来说，基于栈的指令集执行速度要慢一些。



- **编译执行**(与字节码编译不是一回事)

> 通过`即时编译器`（Just In Tim, JIT）将字节码转换为本地机器码来执行；现代JVM会根据代码热点来生成相应的本地机器码。



- **解释执行**

> 通过`解释器`来读取字节码，遇到相应的指令就去执行该指令。

##### 3. invokespecial  <----静态解析

> 调用自己的私有方法、构造方法(<init>)、以及父类的方法

##### 4. invokevirtual   <----动态解析

> 调用虚方法，运行期动态查找继承了这个类的子类的方法进行调用。跟多态紧密相关。

##### 5. invokedynamic   <----动态解析

> 动态调用方法。(JDK1.7引入)通过引擎给予Java动态调用代码的能力，比如说动态调用JS、Python、Groovy等。



